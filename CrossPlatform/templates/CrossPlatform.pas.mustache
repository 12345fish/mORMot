/// this unit has been generated by a tool - do not modify it by hand
// - retrieved from http://{{host}}/{{uri}}
// at {{time}} using "{{templatename}}" template
unit {{filename}};

interface

uses
  SynCrossPlatformSpecific,
  SynCrossPlatformREST;
  
{{! recursive partials used to write records type definition}}
{{<writerec}}record
{{#fields}}
    {{propname}}: {{#typeName}}{{typeName}}{{/typeName}}{{#isRecord}}{{>writerec}}{{/isRecord}}{{#isSimpleArray}}array of {{typeName}}{{/isSimpleArray}}{{#isRecordArray}}[{{>writerec}}{{/isRecordArray}};
{{/fields}}
  end;
{{/writerec}}
{{<setrec}}{{#fields}}
{{#typeName}}  result.{{propname}} := Value.{{propname}};{{/typeName}}{{#isRecord}}  result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecord}}{{#isSimpleArray}}  for var item in Value.{{propname}} do result.{{propname}}.Add(item);{{/isSimpleArray}}{{#isRecordArray}}result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecordArray}}
{{/fields}}
{{/setrec}}
{{<getrec}}{{#fields}}
{{#typeName}}  result.{{propname}} := Value.{{propname}};{{/typeName}}{{#isRecord}}  result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecord}}{{#isSimpleArray}}  for var item in Value.{{propname}} do result.{{propname}}.Add(item);{{/isSimpleArray}}{{#isRecordArray}}result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecordArray}}
{{/fields}}
{{/getrec}}
{{#withRecords}}
type // define some record types, used as properties below
  {{#records}}
  {{name}} = {{>writerec}} 
  {{/records}}
{{/withRecords}}
type
  {{#orm}}
  {{^isinmormotpas}}
  /// map "{{tablename}}" table
  {{classname}} = class(TSQLRecord)
  protected
    {{#fields}}
    f{{name}}: {{typerttiname}}; 
    {{/fields}}
  {{#hasRecords}}
  public
    {{#fields}}
    {{#isrecord}}
    property {{name}}: {{typeRttiName}} read f{{name}} write f{{name}}{{#unique}} stored AS_UNIQUE{{/unique}};
    {{/isrecord}}
    {{/fields}}
  {{/hasRecords}}
  published
    {{#fields}}
    {{^isrecord}}
    property {{name}}: {{typeRttiName}}{{#width}} index {{width}}{{/width}} read f{{name}} write f{{name}}{{#unique}} stored AS_UNIQUE{{/unique}};
    {{/isrecord}}
    {{/fields}}
  end;
  
  {{/isinmormotpas}}
  {{/orm}}
  
/// return the database Model corresponding to this server
function GetModel: TSQLModel;

{{#port}}
const
  /// the server port, corresponding to http://{{host}}
  SERVER_PORT = {{port}};

{{/port}}

implementation


function GetModel: TSQLModel;
begin
  result := TSQLModel.Create([{{#orm}}{{classname}}{{comma}}{{/orm}}],'{{root}}');
end;


end.