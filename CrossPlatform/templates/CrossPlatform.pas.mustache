/// remote access to a mORMot server using SynCrossPlatform* units
// - retrieved from http://{{host}}/{{uri}}
// at {{time}} using "{{templateName}}" template
unit {{fileName}};

{
  WARNING:
    This unit has been generated by a mORMot {{mORMotVersion}} server.
    Any manual modification of this file may be lost after regeneration.

  Synopse mORMot framework. Copyright (C) {{year}} Arnaud Bouchez
    Synopse Informatique - http://synopse.info

  This unit is released under a MPL/GPL/LGPL tri-license,
  and therefore may be freely included in any application.
}

interface

uses
  SynCrossPlatformJSON,
  SynCrossPlatformSpecific,
  SynCrossPlatformREST;
  
{{! recursive partials used to write records type definition}}
{{<writerec}}record
{{#fields}}
{{nestedIdentation}}    {{propName}}: {{#typePascal}}{{typePascal}};{{/typePascal}}{{#nestedRecord}}{{>writerec}}{{nestedIdentation}}    end;{{/nestedRecord}}{{#nestedSimpleArray}}array of {{typePascal}};{{/nestedSimpleArray}}{{#nestedRecordArray}}array of {{>writerec}}{{nestedIdentation}}    end;{{/nestedRecordArray}}
{{/fields}}{{/writerec}}
{{#withEnumerates}}
type // define some enumeration types, used below
{{#enumerates}}
  {{name}} = ({{#values}}{{.}}{{^-last}}, {{/-last}}{{/values}});
{{/enumerates}}

{{/withEnumerates}}
{{#withSets}}
type // define some set types, used below
{{#sets}}
  {{name}} = set of({{#values}}{{.}}{{^-last}}, {{/-last}}{{/values}});
{{/sets}}

{{/withSets}}
{{#withRecords}}
type // define some record types, used as properties below
{{#records}}
  {{name}} = {{>writerec}}  end;

{{/records}}
{{/withRecords}}
{{<method}}{{methodName}}({{#args}}{{^dirResult}}{{dirName}} {{argName}}: {{typePascal}}{{commaIn}}{{/dirResult}}{{/args}}){{#args}}{{#dirResult}}: {{typePascal}}{{/dirResult}}{{/args}};{{/method}}
type
{{#soa.services}}
  /// service accessible via http://{{host}}/{{root}}/{{uri}}
  // - this service will run in sic{{instanceCreationName}} mode
  TService{{interfaceURI}} = class(TServiceClientAbstract{{#isClientDriven}}ClientDriven{{/isClientDriven}})
  public
    constructor Create(aClient: TSQLRestClientURI); override;
{{#methods}}
    {{verb}} {{>method}}
{{/methods}}
  end;

{{/soa.services}}
{{#orm}}
{{^isInMormotPas}}
  /// map "{{tableName}}" table
  {{className}} = class(TSQLRecord)
  protected
    {{#fields}}
    f{{name}}: {{typePascal}}; 
    {{/fields}}
  {{#hasRecords}}
  public
    {{#fields}}
    {{#isrecord}}
    property {{name}}: {{typePascal}} read f{{name}} write f{{name}}{{#unique}} stored AS_UNIQUE{{/unique}};
    {{/isrecord}}
    {{/fields}}
  {{/hasRecords}}
  published
    {{#fields}}
    {{^isrecord}}
    property {{name}}: {{typePascal}}{{#width}} index {{width}}{{/width}} read f{{name}} write f{{name}}{{#unique}} stored AS_UNIQUE{{/unique}};
    {{/isrecord}}
    {{/fields}}
  end;
  
{{/isInMormotPas}}
{{/orm}}

/// return the database Model corresponding to this server
function GetModel: TSQLModel;

{{#port}}
const
  /// the server port, corresponding to http://{{host}}
  SERVER_PORT = {{port}};

{{/port}}

implementation
{{#withRecords}}
{{<setrec}}{{#fields}}
{{#isSimple}}  result.{{fullPropName}} := _variant.{{fullPropName}};
{{/isSimple}}{{#nestedRecord}}{{>setrec}}{{/nestedRecord}}{{#fromVariant}}  result.{{fullPropName}} := {{fromVariant}}(_variant.{{fullPropName}});
{{/fromVariant}}{{#nestedSimpleArray}}  SetLength(result.{{fullPropName}},JSONVariantDataSafe(_variant.{{fullPropName}})^.Count);
  for i := 0 to high(result.{{fullPropName}}) do
    result.{{fullPropName}}[i] := JSONVariantDataSafe(_variant.{{fullPropName}})^.Item[i];
{{/nestedSimpleArray}}{{#nestedRecordArray}}  _arr := JSONVariantDataSafe(_variant.{{fullPropName}});
  if _arr.Kind=jvArray then begin
    SetLength(result.{{fullPropName}},_arr.Count);
    for _a := 0 to _arr.Count-1 do
    with result.{{fullPropName}}[_a] do begin
{{#fields}}
      {{propName}} := {{#fromVariant}}{{fromVariant}}({{/fromVariant}}_arr.Values[_a].{{propName}}{{#fromVariant}}){{/fromVariant}};
{{/fields}}
    end;
  end;
{{/nestedRecordArray}}{{/fields}}{{/setrec}}
{{<getrec}}{{#fields}}
{{#isSimple}}  res.SetPath('{{fullPropName}}',_record.{{fullPropName}});
{{/isSimple}}{{#nestedRecord}}{{>getrec}}{{/nestedRecord}}{{#toVariant}}  res.SetPath('{{fullPropName}}',{{toVariant}}(_record.{{fullPropName}}));
{{/toVariant}}{{#nestedSimpleArray}}  with res.EnsureData('{{fullPropName}}')^ do
    for i := 0 to high(_record.{{fullPropName}}) do
      AddValue(_record.{{fullPropName}}[i]);
{{/nestedSimpleArray}}{{#nestedRecordArray}}  with res.EnsureData('{{fullPropName}}')^ do
    for i := 0 to high(_record.{{fullPropName}}) do
    with AddItem^, _record.{{fullPropName}}[i] do begin
{{#fields}}
      AddNameValue('{{propName}}',{{#toVariant}}{{toVariant}}({{/toVariant}}{{propName}}{{#toVariant}}){{/toVariant}});
{{/fields}}
    end;
{{/nestedRecordArray}}{{/fields}}{{/getrec}}
{{#withEnumerates}}
{ Some helpers for enumerates types }

{{#enumerates}}
function Variant2{{name}}(const _variant: variant): {{name}};
begin
  result := {{name}}(VariantToEnum(_variant,[{{#values}}'{{.}}'{{^-last}},{{/-last}}{{/values}}]));
end;

{{/enumerates}}

{{/withEnumerates}}
{ Some helpers for record types:
  due to potential obfuscation of generated JavaScript, we can't assume
  that the JSON used for transmission would match record fields naming }
{{#records}}

function Variant2{{name}}(const _variant: variant): {{name}};
var i: integer;
    _a: integer;
    _arr: PJSONVariantData;
begin
{{>setrec}}
end;

function {{name}}2Variant(const _record: {{name}}): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
{{>getrec}}
  result := variant(res);
end;
{{/records}}
{{/withRecords}}

function GetModel: TSQLModel;
begin
  result := TSQLModel.Create([{{#orm}}{{className}}{{comma}}{{/orm}}],'{{root}}');
end;

{{#soa.services}}

{ TService{{interfaceURI}} }

constructor TService{{interfaceURI}}.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := '{{interfaceURI}}';
  fServiceURI := '{{uri}}';
  fInstanceImplementation := sic{{instanceCreationName}};
  fContractExpected := '{{contractExpected}}';
  inherited Create(aClient);
end;

{{#methods}}
{{verb}} TService{{interfaceURI}}.{{>method}}
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'{{methodName}}',{{ArgsOutputCount}}, // raise EServiceException on error
    [{{#args}}{{#dirInput}}{{#toVariant}}{{toVariant}}({{argName}}){{/toVariant}}{{^toVariant}}{{argName}}{{/toVariant}}{{commaInSingle}}{{/dirInput}}{{/args}}],res);
{{#args}}{{#dirOutput}}  {{argName}} := {{#fromVariant}}{{fromVariant}}({{/fromVariant}}res[{{indexOutResult}}{{#fromVariant}}){{/fromVariant}};
{{/dirOutput}}{{/args}}end;

{{/methods}}
{{/soa.services}}

end.