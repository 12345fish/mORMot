/// this unit has been generated by a tool - do not modify it by hand
// - retrieved from http://{{host}}/{{uri}}
// at {{time}} using "{{templatename}}" template
unit {{filename}};

interface

uses
  SmartCL.System,
  System.Types,
  SynCrossPlatformSpecific,
  SynCrossPlatformREST;
  
{{! recursive partials used to write records type definition}}
{{<writerec}}record
{{#fields}}
    {{propname}}: {{#typeName}}{{typeName}}{{/typeName}}{{#isRecord}}{{>writerec}}{{/isRecord}}{{#isSimpleArray}}array of {{typeName}}{{/isSimpleArray}}{{#isRecordArray}}[{{>writerec}}{{/isRecordArray}};
{{/fields}}
  end;
{{/writerec}}
{{<setrec}}{{#fields}}
{{#typeName}}  result.{{propname}} := Value.{{propname}};{{/typeName}}{{#isRecord}}  result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecord}}{{#isSimpleArray}}  for var item in Value.{{propname}} do result.{{propname}}.Add(item);{{/isSimpleArray}}{{#isRecordArray}}result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecordArray}}
{{/fields}}
{{/setrec}}
{{<getrec}}{{#fields}}
{{#typeName}}  result.{{propname}} := Value.{{propname}};{{/typeName}}{{#isRecord}}  result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecord}}{{#isSimpleArray}}  result.{{propname}} := variant(Value.{{propname}});{{/isSimpleArray}}{{#isRecordArray}}result.{{propname}} := Value.{{propname}}; TO BE COMPLETED{{/isRecordArray}}
{{/fields}}
{{/getrec}}
{{#withRecords}}
type // define some record types, used as properties below
  {{#records}}
  {{name}} = {{>writerec}} 
  {{/records}}
{{/withRecords}}
type
  {{#orm}}
  {{^isinmormotpas}}
  /// map "{{tablename}}" table
  {{classname}} = class(TSQLRecord)
  protected
    {{#fields}}
    f{{name}}: {{typerttiname}}; 
    {{/fields}}
    // those overriden methods will emulate the needed RTTI
    class function ComputeRTTI: TRTTIPropInfos; override;
    procedure SetProperty(FieldIndex: integer; const Value: variant); override;
    function GetProperty(FieldIndex: integer): variant; override;
  public
    {{#fields}}
    property {{name}}: {{typerttiname}} read f{{name}} write f{{name}};
    {{/fields}}
  end;
  
  {{/isinmormotpas}}
  {{/orm}}
  
/// return the database Model corresponding to this server
function GetModel: TSQLModel;

{{#port}}
const
  /// the server port, corresponding to http://{{host}}
  SERVER_PORT = {{port}};

{{/port}}

implementation

{{#withRecords}}

{ define some helpers for record types }
{{#records}}

function Variant2{{name}}(const Value: variant): {{name}};
begin
{{>setrec}}
end;

function {{name}}2Variant(const Value: {{name}}): variant;
begin
  result := TVariant.CreateObject;
{{>getrec}}
end;
{{/records}}
{{/withRecords}}

{{#orm}}
{{^isinmormotpas}}

{ {{classname}} }

class function {{classname}}.ComputeRTTI: TRTTIPropInfos;
begin
  result := TRTTIPropInfos.Create(
    [{{#fields}}'{{name}}'{{comma}}{{/fields}}],
    [{{#fields}}{{typekindname}}{{comma}}{{/fields}}]);
end;

procedure {{classname}}.SetProperty(FieldIndex: integer; const Value: variant);
begin
  case FieldIndex of
  0: fID := Value;
  {{#fields}}
  {{#isrecord}}
  {{index}}: f{{name}} := Variant2{{typerttiname}}(Value);
  {{/isrecord}}
  {{^isrecord}}
  {{index}}: f{{name}} := Value;
  {{/isrecord}}
  {{/fields}}
  end;
end;

function {{classname}}.GetProperty(FieldIndex: integer): variant;
begin
  case FieldIndex of
  0: result := fID;
  {{#fields}}
  {{#isrecord}}
  {{index}}: result := {{typerttiname}}2Variant(f{{name}});
  {{/isrecord}}
  {{^isrecord}}
  {{index}}: result := f{{name}};
  {{/isrecord}}
  {{/fields}}
  end;
end;

{{/isinmormotpas}}
{{/orm}}

function GetModel: TSQLModel;
begin
  result := TSQLModel.Create([{{#orm}}{{classname}}{{comma}}{{/orm}}],'{{root}}');
end;


end.