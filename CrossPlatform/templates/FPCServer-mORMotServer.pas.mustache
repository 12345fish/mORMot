/// SOA interface implementation for a FPC mORMot server 
{{#uri}}
// - retrieved from http://{{host}}/{{uri}}
// at {{time}} using "{{templateName}}" template
{{/uri}}
{{^uri}}
// - generated at {{time}}
{{/uri}}
unit {{fileName}};

{
  WARNING:
    This unit has been generated by a mORMot {{mORMotVersion}} server.
    Any manual modification of this file may be lost after regeneration.

  Synopse mORMot framework. Copyright (C) {{year}} Arnaud Bouchez
    Synopse Informatique - http://synopse.info

  This unit is released under a MPL/GPL/LGPL tri-license,
  and therefore may be freely included in any application.

  This unit is intended to work on FPC compilers, which lacks of RTTI
  for interfaces - see http://bugs.freepascal.org/view.php?id=26774
}

interface

uses
  SynCommons,
  mORMot{{#units}},
  {{.}}{{/units}};

implementation

{{#soa.enabled}}

{ TInterfaceFactoryDefinition }

type
  /// define and manage missing interface RTTI for defined interfaces
  TInterfaceFactoryDefinition = class(TInterfaceFactoryGenerated)
  protected
    /// will declare the following types to the interface factory:
{{#soa.services}}
    // - I{{interfaceURI}}
{{/soa.services}}
    procedure AddMethodsFromTypeInfo(aInterface: PTypeInfo); override;
  end;

procedure TInterfaceFactoryDefinition.AddMethodsFromTypeInfo(aInterface: PTypeInfo);
begin
{{#soa.services}}
  if aInterface=TypeInfo(I{{interfaceURI}}) then begin
{{#methods}}
    AddMethod('{{methodName}}',[
{{#args}}      {{dir}},'{{argName}}',TypeInfo({{typeSource}}){{#isArgLast}}]);{{/isArgLast}}{{^isArgLast}},
{{/isArgLast}}{{/args}}
{{/methods}}
    exit;
  end;
{{/soa.services}}
end;

initialization
{{#soa.services}}
  TInterfaceFactoryDefinition.RegisterInterface(TypeInfo(I{{interfaceURI}}));
{{/soa.services}}
{{/soa.enabled}}
end.